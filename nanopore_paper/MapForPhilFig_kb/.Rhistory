install.packages("rgeos", "mapproj")
library(ggplot2)
ggplot(africa)
ggplot() +
ggplot() +
geom_map(data=wrld, map=wrld, aes(map_id=id, x=long, y=lat),      fill="white", color="#7f7f7f", size=0.25)
ggplot() +
geom_map(data=wrld, map=wrld, aes(map_id=id, x=long, y=lat),      fill="white", color="#7f7f7f", size=0.25)
install.packages("rgeos", "mapproj")
ggplot() +
geom_map(data=wrld, map=wrld, aes(map_id=id, x=long, y=lat),      fill="white", color="#7f7f7f", size=0.25)
library(rworldmap)
theCountries <- c("DEU", "COD", "BFA")
# These are the ISO3 names of the countries you'd like to plot in red
malDF <- data.frame(country = c("DEU", "COD", "BFA"),
malaria = c(1, 1, 1))
# malDF is a data.frame with the ISO3 country names plus a variable to
# merge to the map data
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
# This will join your malDF data.frame to the country map data
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
# And this will plot it, with the trick that the color palette's first
# color is red
library(rworldmap)
malDF <- data.frame(country = c("TAN", "KEN", "DRC"),
malaria = c(1, 1, 1))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
# And this will plot it, with the trick that the color palette's first
malDF <- data.frame(country = c("TAN", "KEN", "COD"),
malaria = c(1, 1, 1))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, catMethod = "categorical",
missingCountryCol = gray(.8))
malDF <- data.frame(country = c("TZA", "KEN", "COD"),
malaria = c(1, 1, 2))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
malDF <- data.frame(country = c("TZA", "KEN", "COD"),
malaria = c(195, 1, 2))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "continuous",
missingCountryCol = gray(.8))
malDF <- data.frame(country = c("TZA", "KEN", "COD", "UGA", "RWA", "NAM","MOZ", "ZAF", "CAF"),
malaria = c(195, 5, 2))
malDF <- data.frame(country = c("TZA", "KEN", "COD", "UGA", "RWA", "NAM","MOZ", "ZAF", "CAF"),
malaria = c(195, 5, 1,1,1,3,1,5,1))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "continuous",
missingCountryCol = gray(.8))
malDF <- data.frame(country = c("TZA", "KEN", "COD", "UGA", "RWA", "NAM","MOZ", "ZAF", "CAF"),
malaria = c(195, 5, 1,1,1,3,1,5,1))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "continuous",
missingCountryCol = gray(.8))
?mapCountryData
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=brewer.pal(4, "Yellow"),
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=brewer.pal(4, "YlOrBr"),
missingCountryCol = gray(.8))
library(RColorBrewer)
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=brewer.pal(4, "YlOrBr"),
missingCountryCol = gray(.8))
# And this will plot it, with the trick that the color palette's first
# color is red
library("colorspace")
pal <- choose_palette()
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=pal,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=pal(4),
missingCountryCol = gray(.8))
malaria
malaria = c(195, 5, 1,1,1,3,1,5,1)
color <- cut(malaria,
breaks=c(0,3,5,195), labels=sequential_hcl(3))
color
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "pretty",colourPalette=color(3),
missingCountryCol = gray(.8))
?mapCountryData
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "diverging",colourPalette=color(3),
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "diverging",colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = 3,colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = 3,colourPalette=color,
missingCountryCol = gray(.8))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = 3,colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "diverging",colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "catergorical",colourPalette=color,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "catergorical",
missingCountryCol = gray(.8))
malDF <- data.frame(country = c("TZA", "KEN", "COD", "UGA", "RWA", "NAM","MOZ", "ZAF", "CAF"),
malaria = c(195, 5, 1,1,1,3,1,5,1))
malMap <- joinCountryData2Map(malDF, joinCode = "ISO3",
nameJoinColumn = "country")
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",
missingCountryCol = gray(.8))
pal <- choose_palette()
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",colourPalette = col,
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",colourPalette = col(4),
missingCountryCol = gray(.8))
mapCountryData(malMap, nameColumnToPlot="malaria", catMethod = "categorical",colourPalette = pal(4),
missingCountryCol = gray(.8))
mapCountryData(mapRegion ="africa",malMap, nameColumnToPlot="malaria", catMethod = "categorical",colourPalette = pal(4),
missingCountryCol = gray(.8))
plot(africa)
?   , mapRegion =         "world"
?sPDF
plot(africa[which(africa$NAME=="Tanzania"|africa$NAME=="Kenya"|africa$NAME=="Namibia"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="South Africa"|africa$NAME=="Central African Republic"),],col="gray",border="black",lwd=4,add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="lightyellow",add=T)
#AfricaMap <- WorldMap[WorldMap$CONTINENT=="Africa",]
sPDF=getMap(resolution="less islands")
africa=sPDF[which(sPDF$continent=="Africa"),]
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="lightyellow",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="moccasin",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="palegoldenrod",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="yellow",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col=#B69620
,add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col=#B69620
,add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#B69620"
,add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#C5AC43",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="palegoldenrod",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#b69620",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#d5d09d",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#e9d8aa",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="moccasin",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="palegoldenrod",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#B69620"
,add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",0.5),add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",0.1),add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",1),add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",0.1),add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="moccasin",add=T)
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",0.1),add=T)
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col=alpha("#B69620",0.2),add=T)
plot(africa[which(africa$NAME=="Namibia"),],col=alpha("#B69620",0.4),add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col==alpha("#B69620",0.6),add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#B69620"
,add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="ffe3ab",add=T)
africa=sPDF[which(sPDF$continent=="Africa"),]
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="ffe3ab",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#ffe3ab",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#ffc854",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#fdac06",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#ffe3ab",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fee27e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
africa=sPDF[which(sPDF$continent=="Africa"),]
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#fef8a7",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fee27e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#feffd5",add=T)
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#feffd5",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fee27e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#feffd5",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fde37e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
leg.txt=c("1", "3", "5","195")
leg.txt=c("1", "3", "5","195")
leg.txt=c("1", "3", "5","195")
leg.col=c("#feffd5", "#fde37e","#ffd781","#cf8a06")
legend("topleft", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="white")
leg.txt=c("1", "3", "5","195")
leg.col=c("#feffd5", "#fde37e","#ffd781","#cf8a06")
legend("topleft", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="white")
legend("topleft", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
legend("middle", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
sPDF=getMap(resolution="less islands")
africa=sPDF[which(sPDF$continent=="Africa"),]
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#feffd5",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fde37e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
leg.txt=c("1", "3", "5","195")
leg.col=c("#feffd5", "#fde37e","#ffd781","#cf8a06")
legend("middle", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
legend("centre", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
legend("center", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
legend("left", legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
legend(locator(), legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
sPDF=getMap(resolution="less islands")
africa=sPDF[which(sPDF$continent=="Africa"),]
plot(africa)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="Zimbabwe"|africa$NAME=="Uganda"|africa$NAME=="Rwanda"|africa$NAME=="Mozambique"|africa$NAME=="Central African Republic"),],col="#feffd5",add=T)
plot(africa[which(africa$NAME=="Namibia"),],col="#fde37e",add=T)
plot(africa[which(africa$NAME=="Kenya"|africa$NAME=="South Africa"),],col="#ffd781",add=T)
plot(africa[which(africa$NAME=="Tanzania"),],col="#cf8a06"
,add=T)
leg.txt=c("1", "3", "5","195")
leg.col=c("#feffd5", "#fde37e","#ffd781","#cf8a06")
legend(locator(), legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
plot(africa)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#ffcaaa",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fe817f",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#ff3203",add=T)
leg.col=c("#ffcaaa", "#fe817f","#ff3203")
legend(locator(), legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
leg.txt=c("1", "2", "5")
leg.col=c("#ffcaaa", "#fe817f","#ff3203")
legend(locator(), legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
plot(africa)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#fbcead",add=T)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#ffe6d7",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fbcead",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#e52b01",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#fe5229",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fe9882",add=T)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#ffe6d7",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fe9882",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#fe5229",add=T)
plot(africa)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#ffe6d7",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fe9882",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#fe5229",add=T)
plot(africa)
plot(africa[which(africa$NAME=="Algeria"|africa$NAME=="Gabon"|africa$NAME=="Nigeria"|africa$NAME=="Tunisia"),],col="#ffe6d7",add=T)
plot(africa[which(africa$NAME=="Ethiopia"|africa$NAME=="Somalia"),],col="#fe9882",add=T)
plot(africa[which(africa$NAME=="Morocco"|africa$NAME=="Kenya"),],col="#fe5229",add=T)
leg.txt=c("1", "2", "5")
leg.col=c("#ffe6d7", "#fe9882","#fe5229")
legend(locator(), legend=leg.txt, fill=leg.col, bg="white", cex=0.7, bty="n", x.intersp=0.5, y.intersp=0.7, text.col="black")
?getMap
library(ggtree)
library(ape)
## ML tree
tree=read.tree("~/Documents/SEQUENCE_DATA/Trees/2019_Tanz_RABV/RAxML_bipartitions.161219_Tanz302_v1")
tempest=read.delim("~/Documents/SEQUENCE_DATA/latest_sequences/minionSeq_May18/tempest/tempest_280518_tanz_may18_10bs")
plot(tempest$date,tempest$distance)
tempest=read.delim("~/Documents/SEQUENCE_DATA/latest_sequences/minionSeq_May18/tempest/tempest_280518_tanz_may18_10bs")
## install packages- only need to do this once
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", version = "3.8")
y
## path to fasta file: change as required
filepath="~/Dropbox/Rabies/kirstynWork/TANZANIA/newPrimers/primer_test_aligned.fasta"
## read in the fasta files (in DNA string format)
seq=readDNAStringSet(filepath)
## import the library
library(Biostrings)
## path to fasta file: change as required
filepath="~/Dropbox/Rabies/kirstynWork/TANZANIA/newPrimers/primer_test_aligned.fasta"
## read in the fasta files (in DNA string format)
seq=readDNAStringSet(filepath)
## code that replaces IUPAC with "N"
newseq=replaceAmbiguities(seq, new="N")
## save the new version of the fasta file
## - new filepath (where you want to save file and what you want to call it)
newfilepath="~/Dropbox/Rabies/kirstynWork/TANZANIA/newPrimers/testnew.fasta"
## - write the file
writeXStringSet(newseq, newfilepath, append=FALSE, format="fasta")
### Trees
#source("https://bioconductor.org/biocLite.R")
#biocLite("ggtree")
library(ggtree)
library(ape)
library(stringr)
library(data.table)
library(treeio)
library(tidytree)
require(phylobase)
library(ggrepel)
## simple tree visualisation
tree=read.tree("~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_COSMOPOLITAN_AF1a1b_og_rerooted.tree")
# get tip info
#  meta=tree$tip.label
#  meta2=as.data.table(tstrsplit(meta, "/"))
# # first column must be taxa labels (or node) to allow mapping back to tree
#  meta2=cbind(tree$tip.label,meta2)
#  names(meta2)=c("taxa","aln", "clade", "member","source","sample_id")
#   write.csv(meta2,"~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_COSMOPOLITAN_AF1a1b_metadata.csv")
#extra metadata
meta=read.csv("~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_COSMOPOLITAN_AF1a1b_metadata.csv")
meta$label2=paste(meta$sample_id,meta$year,meta$country,sep="/" )
meta$size2=paste(meta$source)
meta$size2[meta$size2=="this paper"]=1
meta$size2[meta$size2=="ncbi-curated"]=0.2
p <- ggtree(tree) %<+% meta
p+geom_label(aes(label=node))
#ggtree(tree) + geom_text2(aes(subset=!isTip, label=node), hjust=-.3) + geom_tiplab()
p+ geom_hilight(node=275, fill="blue", alpha=.2) +geom_hilight(node=252, fill="pink", alpha=.4)+ geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+ theme(legend.position = "bottom") +
geom_tippoint(shape=24,size=2,aes(subset= source=="this paper", color=county,alpha=0.3,fill=country))+geom_tippoint(size=1,aes(subset= (country=="Tanzania"|country=="Kenya"), alpha=0.3,shape = source,color = country)) +geom_treescale()
#extra metadata
meta=read.csv("~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_COSMOPOLITAN_AF1a1b_metadata.csv")
meta$label2=paste(meta$sample_id,meta$year,meta$country,sep="/" )
meta$size2=paste(meta$source)
meta$size2[meta$size2=="this paper"]=1
meta$size2[meta$size2=="ncbi-curated"]=0.2
p <- ggtree(tree) %<+% meta
p+geom_label(aes(label=node))
p+ geom_hilight(node=275, fill="blue", alpha=.2) +geom_hilight(node=252, fill="pink", alpha=.4)+ geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+ theme(legend.position = "bottom") +
geom_tippoint(shape=24,size=2,aes(subset= source=="this paper", color=county,alpha=0.3,fill=country))+geom_tippoint(size=1,aes(subset= (country=="Tanzania"|country=="Kenya"), alpha=0.3,shape = source,color = country)) +geom_treescale()
p+ geom_hilight(node=275, fill="blue", alpha=.2) +geom_hilight(node=252, fill="pink", alpha=.4)+ geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+ theme(legend.position = "bottom") +
geom_tippoint(shape=24,size=2,aes(subset= source=="this paper", color=county,alpha=0.3,fill=country))+geom_tippoint(size=1,aes(subset= (country=="Tanzania"|country=="Kenya"), alpha=0.3,shape = source,color = country)) +geom_treescale()
p+ geom_hilight(node=275, fill="blue", alpha=.2) +geom_hilight(node=252, fill="pink", alpha=.4)+ geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+ theme(legend.position = "bottom") +
geom_tippoint(shape=24,size=2,aes(subset= source=="this paper", color=country,alpha=0.3,fill=country))+geom_tippoint(size=1,aes(subset= (country=="Tanzania"|country=="Kenya"), alpha=0.3,shape = source,color = country)) +geom_treescale()
library(ggtree)
library(ape)
library(stringr)
library(data.table)
library(treeio)
library(tidytree)
require(phylobase)
library(ggrepel)
## simple tree visualisation
tree=read.tree("~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_ASIAN_SEA4_og_rerooted.tree")
# get tip info
# meta=tree$tip.label
# meta2=as.data.table(tstrsplit(meta, "/"))
# first column must be taxa labels (or node) to allow mapping back to tree
# meta2=cbind(tree$tip.label,meta2)
# names(meta2)=c("taxa","aln", "clade", "member","source","sample_id")
#extra metadata
meta=read.csv("~/Documents/SEQUENCE_DATA/MinION/rabvglue_alignmentsPhylogenies/AL_WG_ASIAN_SEA4_metadata.csv")
meta$label2=paste(meta$sample_id.1,meta$year,meta$region,sep="/" )
p <- ggtree(tree) %<+% meta
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+geom_tippoint(size=2,aes(shape = source, color = region))  + theme(legend.position = "bottom") +geom_treescale(linesize=0.3)+ geom_tiplab(aes(label=label2), size=1.4, linesize=0, align=F, offset=0.001)
pdf("~/Desktop/test.pdf", height=8, width=11)
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+geom_tippoint(size=2,aes(shape = source, color = region))  + theme(legend.position = "bottom") +geom_treescale(linesize=0.3)+ geom_tiplab(aes(label=label2), size=1.4, linesize=0, align=F, offset=0.001)
dev.off()
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+geom_tippoint(size=2,aes(shape = source, color = region))  + theme(legend.position = "bottom") +geom_treescale(linesize=0.3)+ geom_tiplab(aes(label=label2), size=1.4, linesize=0, align=F, offset=0.001)
pdf("~/Desktop/test.pdf", height=8, width=11)
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+geom_tippoint(size=2,aes(shape = source, color = region))  + theme(legend.position = "bottom") +geom_treescale(linesize=0.3)+ geom_tiplab(aes(label=label2), size=1.4, linesize=0, align=F, offset=0.001)
dev.off()
getwd()
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))
pdf("~/Desktop/test.pdf", height=8, width=11)
p+geom_nodepoint(size=2, shape=15,alpha=.3,aes(label=node,subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))+geom_tippoint(size=2,aes(shape = source, color = region))  + theme(legend.position = "bottom") +geom_treescale(linesize=0.3)+ geom_tiplab(aes(label=label2), size=1.4, linesize=0, align=F, offset=0.001)
dev.off()
#####
rm(list=ls())
# Load libraries
library(dplyr)
library(rgdal)
library(ggplot2)
library(broom)
library(rgeos)
library(prettymapr)
# Load data
phl_province <- readOGR("PHL", "PHL_province")
phl_province_data <- fortify(phl_province) # Process shapefiles into dataframes - needed for using ggplot2 on spatial data!
# 83 provinces are split into 17 regions - but the regions need adding!
admin <- read.csv("PHL/phl_adminboundaries.csv"); head(admin)
test1 = match(admin$admin2Name_en, phl_province@data$NAME_1)
admin$admin2Name_en[which(is.na(test1))]
# "Davao" = "Region XI" # Davao Occidental
# "Isabela" = "Region II" # City of Isabela, Cagayan Valley
# "Cotabato" = "Region XII" # Soccsksargen (North Cotabato) # Cotabato; Cotabato City
# "NCR" = "National Capital Region" # NCR, City of Manila, First District; NCR, Fourth District; NCR, Second District; NCR, Third District
# "Shariff Kabunsuan" = "Autonomous Region in Muslim Mindanao "
test2 = match(phl_province@data$NAME_1, admin$admin2Name_en)
phl_province@data$NAME_1[which(is.na(test2))]
phl_province@data$NAME_1[grep("Metropolitan Manila", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("NCR, City of Manila", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("North Cotabato", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Cotabato City", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("Shariff Kabunsuan", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Maguindanao", admin$admin2Name_en)]
setwd("~/Github/realtime-rabies/MapForPhilFig/PHL/")
# 83 provinces are split into 17 regions - but the regions need adding!
admin <- read.csv("PHL/phl_adminboundaries.csv"); head(admin)
setwd("~/Github/realtime-rabies/MapForPhilFig/")
# 83 provinces are split into 17 regions - but the regions need adding!
admin <- read.csv("PHL/phl_adminboundaries.csv"); head(admin)
library(dplyr)
library(rgdal)
library(ggplot2)
library(broom)
library(rgeos)
library(prettymapr)
# Load data
phl_province <- readOGR("PHL", "PHL_province")
phl_province_data <- fortify(phl_province) # Process shapefiles into dataframes - needed for using ggplot2 on spatial data!
# 83 provinces are split into 17 regions - but the regions need adding!
admin <- read.csv("PHL/phl_adminboundaries.csv"); head(admin)
test1 = match(admin$admin2Name_en, phl_province@data$NAME_1)
admin$admin2Name_en[which(is.na(test1))]
# "Davao" = "Region XI" # Davao Occidental
# "Isabela" = "Region II" # City of Isabela, Cagayan Valley
# "Cotabato" = "Region XII" # Soccsksargen (North Cotabato) # Cotabato; Cotabato City
# "NCR" = "National Capital Region" # NCR, City of Manila, First District; NCR, Fourth District; NCR, Second District; NCR, Third District
# "Shariff Kabunsuan" = "Autonomous Region in Muslim Mindanao "
test2 = match(phl_province@data$NAME_1, admin$admin2Name_en)
phl_province@data$NAME_1[which(is.na(test2))]
phl_province@data$NAME_1[grep("Metropolitan Manila", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("NCR, City of Manila", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("North Cotabato", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Cotabato City", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("Shariff Kabunsuan", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Maguindanao", admin$admin2Name_en)]
phl_province@data$Province <- admin$admin2Name_en[match(phl_province@data$NAME_1, admin$admin2Name_en)]
phl_province@data$Province[grep("Metropolitan Manila", phl_province@data$NAME_1)] <- "NCR, City of Manila, First District"
phl_province@data$Province[grep("Cotabato", phl_province@data$NAME_1)] <- "Region XII"
phl_province@data$Province[grep("Shariff Kabunsuan", phl_province@data$NAME_1)] <- "Autonomous Region in Muslim Mindanao "
phl_province@data$REGION <- admin$admin1Name_en[match(phl_province@data$NAME_1, admin$admin2Name_en)]
phl_province@data$reg <- "None"
phl_province@data$reg[which(phl_province@data$REGION == "Region I ")] <- "1"
phl_province@data$reg[which(phl_province@data$REGION == "Region III ")] <- "3"
phl_province@data$reg[which(phl_province@data$REGION == "Region IV-A ")] <- "4A"
phl_province@data$reg[which(phl_province@data$REGION == "Region IV-B ")] <- "4B"
phl_province@data$reg[which(phl_province@data$REGION == "Region V ")] <- "5"
#-------------------------------------------------------------------------------
# Create Philippines map
gCentroid(phl_province)
bbox(phl_province)
# Colour scheme
reg_cases = c("1", "3", "4A", "4B", "5", "None")
plot(phl_province, border="darkgrey", col = "grey", lwd=.5, xlim = c(120,125), ylim = c(6,19))
plot(phl_province, col=reg_colours[match(phl_province@data$reg, reg_cases)],
border="darkgrey", lwd=.5, add=TRUE)
legend("topright", legend=reg_cases[1:5], fill=reg_colours[1:5], bty = "n", title="Region", cex=1.3)
addnortharrow(pos="bottomleft", scale=0.8)
plot(phl_province, border="darkgrey", col = "grey", lwd=.5, xlim = c(120,125), ylim = c(6,19))
plot(phl_province, col=reg_colours[match(phl_province@data$reg, reg_cases)],
border="darkgrey", lwd=.5, add=TRUE)
legend("topright", legend=reg_cases[1:5], fill=reg_colours[1:5], bty = "n", title="Region", cex=1.3)
library(prettymapr)
install.packages(c("broom", "prettymapr"))
# Load data
phl_province <- readOGR("PHL", "PHL_province")
phl_province_data <- fortify(phl_province) # Process shapefiles into dataframes - needed for using ggplot2 on spatial data!
# 83 provinces are split into 17 regions - but the regions need adding!
admin <- read.csv("PHL/phl_adminboundaries.csv"); head(admin)
test1 = match(admin$admin2Name_en, phl_province@data$NAME_1)
admin$admin2Name_en[which(is.na(test1))]
# "Davao" = "Region XI" # Davao Occidental
# "Isabela" = "Region II" # City of Isabela, Cagayan Valley
# "Cotabato" = "Region XII" # Soccsksargen (North Cotabato) # Cotabato; Cotabato City
# "NCR" = "National Capital Region" # NCR, City of Manila, First District; NCR, Fourth District; NCR, Second District; NCR, Third District
# "Shariff Kabunsuan" = "Autonomous Region in Muslim Mindanao "
test2 = match(phl_province@data$NAME_1, admin$admin2Name_en)
phl_province@data$NAME_1[which(is.na(test2))]
phl_province@data$NAME_1[grep("Metropolitan Manila", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("NCR, City of Manila", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("North Cotabato", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Cotabato City", admin$admin2Name_en)]
phl_province@data$NAME_1[grep("Shariff Kabunsuan", phl_province@data$NAME_1)] <- admin$admin2Name_en[grep("Maguindanao", admin$admin2Name_en)]
phl_province@data$Province <- admin$admin2Name_en[match(phl_province@data$NAME_1, admin$admin2Name_en)]
phl_province@data$Province[grep("Metropolitan Manila", phl_province@data$NAME_1)] <- "NCR, City of Manila, First District"
phl_province@data$Province[grep("Cotabato", phl_province@data$NAME_1)] <- "Region XII"
phl_province@data$Province[grep("Shariff Kabunsuan", phl_province@data$NAME_1)] <- "Autonomous Region in Muslim Mindanao "
phl_province@data$REGION <- admin$admin1Name_en[match(phl_province@data$NAME_1, admin$admin2Name_en)]
phl_province@data$reg <- "None"
phl_province@data$reg[which(phl_province@data$REGION == "Region I ")] <- "1"
phl_province@data$reg[which(phl_province@data$REGION == "Region III ")] <- "3"
phl_province@data$reg[which(phl_province@data$REGION == "Region IV-A ")] <- "4A"
phl_province@data$reg[which(phl_province@data$REGION == "Region IV-B ")] <- "4B"
phl_province@data$reg[which(phl_province@data$REGION == "Region V ")] <- "5"
#-------------------------------------------------------------------------------
# Create Philippines map
gCentroid(phl_province)
bbox(phl_province)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n = 5
n = 5
cols = gg_color_hue(n)
cols
cols =c( gg_color_hue(n), "transparent")
cols
plot(phl_province, border="darkgrey", col = "grey", lwd=.5, xlim = c(120,125), ylim = c(6,19))
plot(phl_province, col=reg_colours[match(phl_province@data$reg, reg_cases)],
border="darkgrey", lwd=.5, add=TRUE)
legend("topright", legend=reg_cases[1:5], fill=reg_colours[1:5], bty = "n", title="Region", cex=1.3)
reg_colours =c( gg_color_hue(n), "transparent")
